#test configure file

# result folder
RESULTS rst_macro_cyclic_contig

# ------- building -------
CC      cc
CFLAGS  -O2 -march=znver2 -Rpass=loop-vectorize -fopenmp -mllvm -force-vector-interleave=8
LD      cc
LDFLAGS -fopenmp
LDLIBS

# name of the kernel c source file
KERNEL kernel_macro

# ------- running -------
# resources
FLOPS $FLOP
#FLOPS 1,2,4,5,8,10
# known_issue: put larger number of thread first otherwise largest number thereads generate wrong results
#OPENMP_THREADS 128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8
#OPENMP_THREADS 64,32,16,8
OPENMP_THREADS $OPENMP_THREAD
MEM 1024000000

REPEAT 10
# access pattern
PATTERN contig

# thread placement (The easiest way to produce almost good placement is to use `spread` placement and let `HIERARCHY` be the total numer of cores)
PlACEMENT cyclic
# core hierarchy inside node: list of number of cores in each hierarchy from node to die 
# Information of hierarchy can be found with `$ lstopo`
HIERARCHY 128,64,16,8,4
# allowed CPUS, only required for `cpu_bind` placement
# CPUS

# strong or weak scaling (optional)
# SCALING

# legacy C interface, no need to change
C_COMMAND CAMP_EXE -k CAMP_PATTERN -f CAMP_RESULT -t CAMP_NTHREADS -i CAMP_FLOP -s CAMP_MEM -r CAMP_REPEAT -d CAMP_PlACEMENT -l CAMP_HIERARCHY -c CAMP_CPUS CAMP_SCALING
# command for launching each executable, you may want to set environment variable for instance
CAMP_RUN C_COMMAND
