#!/usr/bin/env python3
# known issue: same FLOP can NOT be batched, maybe because use same exeutable?

from scripts.camp_utils import *
import matplotlib
import matplotlib.pyplot as plt
import re
import csv 
import time
import numpy as np

# -------------- parameter -----------------
# frequency = 1500000

config_tamplate = "config/example_tag_tamplate"
config_tag_tamplate = "tagged_batch/example_{}"
batch_tamplate = "batch/archer2_tag_tamplate.slurm"
batch_tag_tamplate = "tagged_batch/archer2_{}.slurm"

result_filename = "rst_energy_full_2.0.csv"

# [[flop, nthread], ...]
# config_list = [[1,128],[2,128]]
config_list_best = []
config_list_full = []

# -------------- end -----------------

def get_underpopulation(filename):
    """analysis csv file to know the underpopulation effect, aka, which thread generate best bandwidth"""
    df = csv2df(filename)
    best_thread_list = []
    df = df.sort_values(by=["intensity", "nthreads"])
    OIs = get_elem_list("intensity", df)
    nthreads = get_elem_list("nthreads", df)
    OI_dfs = get_sub_df("intensity", df)
    bandwidth = np.zeros(shape=(len(OIs), len(nthreads)))  # row is OI, column is nthreads
    for i, OI in enumerate(OI_dfs):
        sub_df = OI_dfs[OI]
        bandwidth[i] = sub_df["bandwidth(MB/s)"].to_numpy()
        max_idx = np.argmax(bandwidth[i])
        best_thread_list.append(nthreads[max_idx])

    flops = [int(round(oi*48)) for oi in OIs]
    for idx in range(len(flops)):
        config_list_best.append([flops[idx], best_thread_list[idx]])
    for idx in range(len(flops)):  
        config_list_full.append([flops[idx], max(nthreads)])

    print("Underpopulate configuration: ", config_list_best)
    print("Fullypopulate configuration: ", config_list_full)

def execute(config_list: list, result_filename: str):
    make_dir_if_needed("tagged_batch","tagged_batch",echo=True)
    with open(result_filename, 'w', encoding='UTF8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["flop", "nthread", "jobid", "energy(J)"])
        for config in config_list:
            tag = "{}_{}".format(config[0], config[1])
            config_tag = config_tag_tamplate.format(tag)
            replace_cmd = "sed -e 's/$FLOP/{}/g' -e 's/$OPENMP_THREAD/{}/g' {} > {}".format(config[0], config[1], config_tamplate, config_tag)
            if execute_shell(replace_cmd, echo=True) != 0:
                sys.stderr.write("Replace tamplate failed\n")
                return 1
            batch_tag = batch_tag_tamplate.format(tag)
            replace_cmd = "sed -e 's/$FREQUENCY/{}/g' -e 's/$CONFIG/{}/g' {} > {}".format(frequency, "example_{}".format(tag), batch_tamplate, batch_tag)
            if execute_shell(replace_cmd, echo=True) != 0:
                sys.stderr.write("Replace tamplate failed\n")
                return 1
            
            submit_cmd = "sbatch {} | grep -Po -m1 '\\d+'".format(batch_tag)
            # submit_cmd = "echo 'Submitted batch job 3391917' | grep -Po -m1 '\\d+'"
            retcode, retval = stdout_shell(submit_cmd, echo=True)
            config.append(retval.strip('\n'))
            writer.writerow(config)
            # time.sleep(10)

def extract(result_filename: str):
    with open(result_filename, 'r', encoding='UTF8', newline='') as f:
        reader = csv.reader(f)
        next(reader, None)
        config_list = []
        for row in reader:
            config_list.append(row)
        # print(config_list)

    with open(result_filename, 'w', encoding='UTF8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["flop", "nthread", "jobid", "energy(J)"])
        for config in config_list:
            jobid = config[2]
            query_cmd = "sacct -j {} --format=ConsumedEnergyRaw | grep -Po -m1 '\\d+'".format(jobid)
            retcode, retval = stdout_shell(query_cmd, echo=True)
            config.append(retval.strip('\n'))
            writer.writerow(config)
    
    print("Extract energy by sacct, done")

def plot(result_filename_full: str, result_filename_best: str):
    df = csv2df(result_filename_full)
    df = df.sort_values(by=["flop", "nthread"])
    flops = get_elem_list("flop", df, repeat=True)
    OIs = ["{:.2f}".format(flop/48) for flop in flops]
    energy_list_full = get_elem_list("energy(J)", df)
    # print(len(energy_list_full))

    df = csv2df(result_filename_best)
    df = df.sort_values(by=["flop", "nthread"])
    flops = get_elem_list("flop", df, repeat=True)
    OIs = ["{:.2f}".format(flop/48) for flop in flops]
    # print("len(IO ", len(OIs))
    energy_list_best = get_elem_list("energy(J)", df)
    # print("df.size ",df.shape)
    # print(len(energy_list_best))

    fig = plt.figure()
    ax = fig.add_subplot(111)
    # print(range(len(OIs)))
    # print(energy_list_full)
    # print(energy_list_best)
    ax.plot(range(len(OIs)),energy_list_full,marker = 'o',color='r', label="Fullypopulate")
    ax.plot(range(len(OIs)),energy_list_best,marker = 'o',color='b', label="Underpopulate")

    ax.legend()
    ax.set_xticks(range(len(OIs)), labels=OIs)
    plt.setp(ax.get_xticklabels(), rotation=45, ha="right", rotation_mode="anchor")

    plt.xlabel("Operational intensity")
    plt.ylabel("Energy (J)")
    # plt.ylim([0, 10000])

    # ax.set_aspect('auto')
    plt.tight_layout()
    # plt.show()
    pic_name = "rst_energy_{}.png".format(frequency)
    plt.savefig(pic_name, dpi=300)
    print("Energy plot saved in: ", pic_name)
        
if __name__ == '__main__':
    if len(sys.argv) != 4:
        sys.stderr.write("\n--- need command ---\n\n")
        sys.stderr.write("\n--- ./energy <result.csv> <frequency> <option: run/extract> ---\n\n")
        sys.exit(1)
    sys.stdout.flush()
    csv_filename = sys.argv[1]
    frequency = sys.argv[2]
    command = sys.argv[3]

    get_underpopulation(csv_filename)

    result_filename_full = "rst_energy_full_{}.csv".format(frequency)
    result_filename_best = "rst_energy_best_{}.csv".format(frequency)

    if command == "run":
        execute(config_list_best, result_filename_best)
        execute(config_list_full, result_filename_full)
    if command == "extract":
        extract(result_filename_best)
        extract(result_filename_full)

        plot(result_filename_full, result_filename_best)